---
title: "Bank Data Analysis-r"
format: html
editor: visual
---

# Part 1: Data Wrangling

## 1.1 clean loans.csv

```{r}
library(tidyverse)
library(lubridate)

# 读取 loans.csv 数据
loans <- read_csv("data/loans.csv")

# 筛选出表示贷款期限与状态的列（例如："24_A", "12_B"等）
loan_term_cols <- loans %>% 
  select(matches("^[0-9]+_[ABCD]$")) %>% 
  colnames()

# 将贷款期限字段 pivot 成长格式
loans_long <- loans %>% 
  pivot_longer(
    cols = all_of(loan_term_cols),
    names_to = "term_status",
    values_to = "flag"
  ) %>% 
  # 仅保留标记为“X”的记录，假设 “X” 表示该贷款期限及状态适用，其余用 "-" 表示无效
  filter(flag != "-") 

# 从 term_status 中提取贷款期限和状态代码
loans_long <- loans_long %>%
  mutate(
    loan_term = as.integer(str_extract(term_status, "^[0-9]+")),
    loan_detail = str_extract(term_status, "[A-Z]")
  ) %>%
  # 为了每个贷款记录只保留第一条有效信息，按贷款记录分组
  group_by(id, account_id, date, amount, payments) %>%
  summarize(
    loan_term = first(loan_term),
    loan_status = if_else(loan_detail %in% c("A", "B"), "expired",
                           if_else(loan_detail %in% c("C", "D"), "current", NA_character_)),
    loan_default = if_else(loan_detail %in% c("B", "D"), TRUE,
                           if_else(loan_detail %in% c("A", "C"), FALSE, NA)),
    .groups = "drop"
  )

# 将拆分的信息与原始数据合并，形成 tidy 版 loans 数据
tidy_loans <- loans %>% 
  select(-all_of(loan_term_cols)) %>%
  left_join(loans_long, by = c("id", "account_id", "date", "amount", "payments"))

# 保存 tidy 后的 loans 数据
write_csv(tidy_loans, "loans_r.csv")
```

## 1.2 clean district.csv

```{r}
# 读取 districts.csv 数据
districts <- read_csv("data/districts.csv")

# 对三个数组型字段去除方括号后，使用 separate() 分解为独立的列
tidy_districts <- districts %>%
  mutate(
    municipality_info = str_remove_all(municipality_info, "\\[|\\]"),
    unemployment_rate = str_remove_all(unemployment_rate, "\\[|\\]"),
    commited_crimes = str_remove_all(commited_crimes, "\\[|\\]")
  ) %>%
  separate(municipality_info, into = c("muni_lt500", "muni_500_1999", "muni_2000_9999", "muni_ge_10000"),
           sep = ",", convert = TRUE) %>%
  separate(unemployment_rate, into = c("unemp_95", "unemp_96"),
           sep = ",", convert = TRUE) %>%
  separate(commited_crimes, into = c("crime_95", "crime_96"),
           sep = ",", convert = TRUE)

# 保存 tidy 后的 districts 数据
write_csv(tidy_districts, "district_r.csv")
```

## 1.3 build analytical dataset

```{r}
# 读取各数据集
accounts <- read_csv("data/accounts.csv")
clients <- read_csv("data/clients.csv")
links <- read_csv("data/links.csv")
cards <- read_csv("data/cards.csv")
transactions <- read_csv("data/transactions.csv")
payment_orders <- read_csv("data/payment_orders.csv")
loans <- tidy_loans  
districts <- tidy_districts

# ① 账户数据与 districts（分支所在区域）合并
data_analytical <- accounts %>%
  left_join(districts, by = c("district_id" = "id")) %>%
  rename(
    account_id = id,
    open_date = date,
    district_name = name
  )

# ② 计算每个账户关联的客户数量（来自 links.csv 表）
num_customers <- links %>%
  group_by(account_id) %>%
  summarize(num_customers = n(), .groups = "drop")
data_analytical <- data_analytical %>%
  left_join(num_customers, by = "account_id")

# ③ 计算每个账户对应的信用卡数量：先将 links 与 cards 关联，再按 account_id 分组计数
cards_join <- links %>%
  inner_join(cards, by = c("id" = "link_id")) %>%
  group_by(account_id) %>%
  summarize(credit_cards = n(), .groups = "drop")
data_analytical <- data_analytical %>%
  left_join(cards_join, by = "account_id") %>%
  mutate(credit_cards = if_else(is.na(credit_cards), 0L, credit_cards))

# ④ 加入贷款信息（按 account_id 关联 tidy loans 数据）
data_analytical <- data_analytical %>%
  left_join(loans %>% select(account_id, amount, payments, loan_term, loan_status, loan_default),
            by = "account_id") %>%
  rename(
    loan_amount = amount,
    loan_payments = payments
  ) %>%
  mutate(
    loan = !is.na(loan_amount)
  )

# ⑤ 根据 transactions 处理提现和余额统计
# 计算每个账户的最大/最小提现金额（假设提现为 debit 类型交易）
withdrawals <- transactions %>%
  filter(type == "debit") %>%
  group_by(account_id) %>%
  summarize(
    max_withdrawal = max(amount, na.rm = TRUE),
    min_withdrawal = min(amount, na.rm = TRUE),
    .groups = "drop"
  )
data_analytical <- data_analytical %>%
  left_join(withdrawals, by = "account_id")

# 计算每个账户的信用卡支付次数（假定 method 为 "credit card" 且 type 为 debit）
cc_payments <- transactions %>%
  filter(method == "credit card", type == "debit") %>%
  group_by(account_id) %>%
  summarize(cc_payments = n(), .groups = "drop")
data_analytical <- data_analytical %>%
  left_join(cc_payments, by = "account_id") %>%
  mutate(cc_payments = if_else(is.na(cc_payments), 0L, cc_payments))

# 计算每个账户的最大和最小余额
balance_stats <- transactions %>%
  group_by(account_id) %>%
  summarize(
    max_balance = max(balance, na.rm = TRUE),
    min_balance = min(balance, na.rm = TRUE),
    .groups = "drop"
  )
data_analytical <- data_analytical %>%
  left_join(balance_stats, by = "account_id")

# ⑥ 按要求选择所需字段并保存最终分析数据集
analytical_dataset <- data_analytical %>%
  select(
    account_id,
    district_name,
    open_date,
    statement_frequency,
    num_customers,
    credit_cards,
    loan,
    loan_amount,
    loan_payments,
    loan_term,
    loan_status,
    loan_default,
    max_withdrawal,
    min_withdrawal,
    cc_payments,
    max_balance,
    min_balance
  )

write_csv(analytical_dataset, "analytical_r.csv")
```

## 

# Part 2: EDA

## 2.1 analytical question

this is an analytical question

```{r}
1 + 1
```

## 2.2 visualization

this is an analytical question

```{r}
1 + 1
```

## 
