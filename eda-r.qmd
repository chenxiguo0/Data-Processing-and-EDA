---
title: "Bank Data Analysis-r"
format: html
editor: visual
---

# Part 1: Data Wrangling

## 1.1 clean loans.csv

```{r}
library(tidyverse)
library(lubridate)

# Read loans.csv data
loans <- read_csv("data/loans.csv")

# Select columns representing loan terms and statuses (e.g., "24_A", "12_B", etc.)
loan_term_cols <- loans %>% 
  select(matches("^[0-9]+_[ABCD]$")) %>% 
  colnames()

# Pivot loan term columns into a long format
loans_long <- loans %>% 
  pivot_longer(
    cols = all_of(loan_term_cols),
    names_to = "term_status",
    values_to = "flag"
  ) %>% 
  # Keep only records marked with "X", while "-" represents an invalid entry
  filter(flag != "-") 

# Extract loan term and status code from term_status
loans_long <- loans_long %>%
  mutate(
    loan_term = as.integer(str_extract(term_status, "^[0-9]+")),
    loan_detail = str_extract(term_status, "[A-Z]")
  ) %>%
  # Retain only the first valid entry for each loan record, grouping by loan attributes
  group_by(id, account_id, date, amount, payments) %>%
  summarize(
    loan_term = first(loan_term),
    loan_status = if_else(loan_detail %in% c("A", "B"), "expired",
                           if_else(loan_detail %in% c("C", "D"), "current", NA_character_)),
    loan_default = if_else(loan_detail %in% c("B", "D"), TRUE,
                           if_else(loan_detail %in% c("A", "C"), FALSE, NA)),
    .groups = "drop"
  )

# Merge the extracted information with the original data to create a tidy version of loans
tidy_loans <- loans %>% 
  select(-all_of(loan_term_cols)) %>%
  left_join(loans_long, by = c("id", "account_id", "date", "amount", "payments"))

# Save the tidy loans dataset
write_csv(tidy_loans, "loans_r.csv")
```

## 1.2 clean district.csv

```{r}
# Read districts.csv data
districts <- read_csv("data/districts.csv")

# Remove brackets from three array-like fields and split them into separate columns using separate()
tidy_districts <- districts %>%
  mutate(
    municipality_info = str_remove_all(municipality_info, "\\[|\\]"),
    unemployment_rate = str_remove_all(unemployment_rate, "\\[|\\]"),
    commited_crimes = str_remove_all(commited_crimes, "\\[|\\]")
  ) %>%
  separate(municipality_info, into = c("muni_lt500", "muni_500_1999", "muni_2000_9999", "muni_ge_10000"),
           sep = ",", convert = TRUE) %>%
  separate(unemployment_rate, into = c("unemp_95", "unemp_96"),
           sep = ",", convert = TRUE) %>%
  separate(commited_crimes, into = c("crime_95", "crime_96"),
           sep = ",", convert = TRUE)

# Save the tidy districts dataset
write_csv(tidy_districts, "district_r.csv")
```

## 1.3 build analytical dataset

```{r}
# Load datasets
accounts <- read_csv("data/accounts.csv")
clients <- read_csv("data/clients.csv")
links <- read_csv("data/links.csv")
cards <- read_csv("data/cards.csv")
transactions <- read_csv("data/transactions.csv")
payment_orders <- read_csv("data/payment_orders.csv")
loans <- tidy_loans  
districts <- tidy_districts

# 1. Merge account data with districts (branch locations)
data_analytical <- accounts %>%
  left_join(districts, by = c("district_id" = "id")) %>%
  rename(
    account_id = id,
    open_date = date,
    district_name = name
  )

# 2. Calculate the number of customers associated with each account (from links.csv)
num_customers <- links %>%
  group_by(account_id) %>%
  summarize(num_customers = n(), .groups = "drop")
data_analytical <- data_analytical %>%
  left_join(num_customers, by = "account_id")

# 3. Calculate the number of credit cards associated with each account: 
# Join links with cards, then count by account_id
cards_join <- links %>%
  inner_join(cards, by = c("id" = "link_id")) %>%
  group_by(account_id) %>%
  summarize(credit_cards = n(), .groups = "drop")
data_analytical <- data_analytical %>%
  left_join(cards_join, by = "account_id") %>%
  mutate(credit_cards = if_else(is.na(credit_cards), 0L, credit_cards))

# 4. Add loan information (join with tidy loans data by account_id)
data_analytical <- data_analytical %>%
  left_join(loans %>% select(account_id, amount, payments, loan_term, loan_status, loan_default),
            by = "account_id") %>%
  rename(
    loan_amount = amount,
    loan_payments = payments
  ) %>%
  mutate(
    loan = !is.na(loan_amount)
  )

# 5. Process withdrawals and balance statistics using transactions data
# Calculate max/min withdrawal amounts (assuming withdrawals are debit transactions)
withdrawals <- transactions %>%
  filter(type == "debit") %>%
  group_by(account_id) %>%
  summarize(
    max_withdrawal = max(amount, na.rm = TRUE),
    min_withdrawal = min(amount, na.rm = TRUE),
    .groups = "drop"
  )
data_analytical <- data_analytical %>%
  left_join(withdrawals, by = "account_id")

# Count credit card payments (assuming method is "credit card" and type is debit)
cc_payments <- transactions %>%
  filter(method == "credit card", type == "debit") %>%
  group_by(account_id) %>%
  summarize(cc_payments = n(), .groups = "drop")
data_analytical <- data_analytical %>%
  left_join(cc_payments, by = "account_id") %>%
  mutate(cc_payments = if_else(is.na(cc_payments), 0L, cc_payments))

# Compute max and min balance for each account
balance_stats <- transactions %>%
  group_by(account_id) %>%
  summarize(
    max_balance = max(balance, na.rm = TRUE),
    min_balance = min(balance, na.rm = TRUE),
    .groups = "drop"
  )
data_analytical <- data_analytical %>%
  left_join(balance_stats, by = "account_id")

# 6. Select required fields and save the final analytical dataset
analytical_dataset <- data_analytical %>%
  select(
    account_id,
    district_name,
    open_date,
    statement_frequency,
    num_customers,
    credit_cards,
    loan,
    loan_amount,
    loan_payments,
    loan_term,
    loan_status,
    loan_default,
    max_withdrawal,
    min_withdrawal,
    cc_payments,
    max_balance,
    min_balance
  )

# Save the analytical dataset
write_csv(analytical_dataset, "analytical_r.csv")
```

## 

# Part 2: EDA

## 2.1 analytical question

The analytical question being addressed is: **Do accounts with loans show a different distribution of maximum balance compared to those without loans?**\
I believe this can be answered visually by comparing the distributions (via a boxplot) of the variable `max_balance` for accounts that have loans versus those that do not. This approach highlights central tendencies, spread, and possible outliers clearly.

## 2.2 visualization

```{r}

library(extrafont)
source("themes/theme-r.R")
theme_set(my_theme)

# Read the analytical dataset created in Part 1
analytical <- read_csv("analytical_r.csv")

# Ensure the loan field is treated as a factor for plotting
analytical <- analytical %>%
  mutate(loan = factor(loan, levels = c("FALSE", "TRUE"), labels = c("No Loan", "Loan")))

# Create a boxplot comparing max_balance by loan status
p <- ggplot(analytical, aes(x = loan, y = max_balance, fill = loan)) +
  geom_boxplot() +
  scale_fill_manual(values = c("No Loan" = "#6699CC", "Loan" = "#CC6666")) +
  labs(
    x = "Loan Status",
    y = "Maximum Account Balance",
    title = "Distribution of Maximum Account Balance by Loan Status",
    subtitle = "A comparative view of account performance based on loan availability",
    caption = "Figure 1: Boxplot comparing maximum account balance for accounts with and without loans."
  ) 

print(p)

```

## 
